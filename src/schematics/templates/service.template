<% if (language == 'typescript') { %>

import { AbstractService } from '../../global/helpers/abstract.service';
import { I<%= pascalCase %> } from './<%= lowerCase %>.interface';

export default class <%= pascalCase %>Service extends AbstractService {
	private <%= camelCase %>: I<%= pascalCase %>[] = [];

	find = async (<%= camelCase %>: Partial<I<%= pascalCase %>>): Promise<I<%= pascalCase %>[]> => {
		throw new Error('Method not implemented.');
	};

	save = async (<%= camelCase %>: I<%= pascalCase %>): Promise<any> => {
		throw new Error('Method not implemented.');
	};

	update = async (id: number, <%= camelCase %>: I<%= pascalCase %>): Promise<any> => {
		throw new Error('Method not implemented.');
	};

	delete = async (id: number): Promise<any> => {
		throw new Error('Method not implemented.');
	};
}

<% } else { %>

const <%= pascalCase %>Service = {};

<%= pascalCase %>Service.find = async (<%= camelCase %>) => {
	throw new Error('Method not implemented.');
};

<%= pascalCase %>Service.save = async (<%= camelCase %>) => {
	throw new Error('Method not implemented.');
};

<%= pascalCase %>Service.update = async (id, <%= camelCase %>) => {
	throw new Error('Method not implemented.');
};

<%= pascalCase %>Service.delete = async (id) => {
	throw new Error('Method not implemented.');
};

module.exports = <%= pascalCase %>Service;

<% } %>