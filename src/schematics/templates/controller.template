<% if (language == 'typescript') { %>

import { Request, Response } from 'express';
import <%= pascalCase %>Service from './<%= lowerCase %>.service';
import { I<%= pascalCase %> } from './<%= lowerCase %>.interface';

export default class <%= pascalCase %>Controller {
	private <%= camelCase %>: I<%= pascalCase %>[] = [];

	constructor(private _<%= camelCase %>Service = new <%= pascalCase %>Service()) {}

	get<%= pascalCase %> = async (req: Request, res: Response): Promise<Response> => {
		throw new Error('Method not implemented.');
	};

	save<%= pascalCase %> = async (req: Request, res: Response): Promise<Response> => {
		throw new Error('Method not implemented.');
	};

	update<%= pascalCase %> = async (req: Request, res: Response): Promise<Response> => {
		throw new Error('Method not implemented.');
	};

	delete<%= pascalCase %> = async (req: Request, res: Response): Promise<Response> => {
		throw new Error('Method not implemented.');
	};
}

<% } else { %>

const _<%= camelCase %>Service = require('./<%= lowerCase %>.service');

const <%= pascalCase %>Controller = {};

<%= pascalCase %>Controller.get<%= pascalCase %> = async (req, res) => {
	throw new Error('Method not implemented.');
};

<%= pascalCase %>Controller.save<%= pascalCase %> = async (req, res) => {
	throw new Error('Method not implemented.');
};

<%= pascalCase %>Controller.update<%= pascalCase %> = async (req, res) => {
	throw new Error('Method not implemented.');
};

<%= pascalCase %>Controller.delete<%= pascalCase %> = async (req, res) => {
	throw new Error('Method not implemented.');
};

module.exports = <%= pascalCase %>Controller;

<% } %>