<% if (language == 'typescript') { %>

import { Request, Response } from 'express';
import <%= pascalCase %>Service from './<%= lowerCase %>.service';
import { I<%= pascalCase %> } from './<%= lowerCase %>.interface';

export default class <%= pascalCase %>Controller {
	private <%= camelCase %>: I<%= pascalCase %>[] = [];

	constructor(private _<%= camelCase %>Service = new <%= pascalCase %>Service()) {}

	get<%= pascalCase %> = async (req: Request, res: Response): Promise<Response> => {
		try {
			this.<%= camelCase %> = await this._<%= camelCase %>Service.find(req.query);
			return res.json(this.<%= camelCase %>);
		} catch (error) {
			console.error(`An error ocurred in <%= pascalCase %>Controller.get<%= pascalCase %>: ${error}`);
			return res.status(500).send(`An error ocurred in <%= pascalCase %>Controller.get<%= pascalCase %>: ${error}`);
		}
	};

	save<%= pascalCase %> = async (req: Request, res: Response): Promise<Response> => {
		try {
			const saved = await this._<%= camelCase %>Service.save(req.body);
			return res.send(saved);
		} catch (error) {
			console.error(`An error ocurred in <%= pascalCase %>Controller.save<%= pascalCase %>: ${error}`);
			return res.status(500).send(`An error ocurred in <%= pascalCase %>Controller.save<%= pascalCase %>: ${error}`);
		}
	};

	update<%= pascalCase %> = async (req: Request, res: Response): Promise<Response> => {
		const { id } = req.params;

		try {
			const updated = await this._<%= camelCase %>Service.update(parseInt(id), req.body);
			return res.send(updated);
		} catch (error) {
			console.error(`An error ocurred in <%= pascalCase %>Controller.update<%= pascalCase %>: ${error}`);
			return res.status(500).send(`An error ocurred in <%= pascalCase %>Controller.update<%= pascalCase %>: ${error}`);
		}
	};

	delete<%= pascalCase %> = async (req: Request, res: Response): Promise<Response> => {
		const { id } = req.params;

		try {
			const deleted = await this._<%= camelCase %>Service.delete(parseInt(id));
			return res.send(deleted);
		} catch (error) {
			console.error(`An error ocurred in <%= pascalCase %>Controller.delete<%= pascalCase %>: ${error}`);
			return res.status(500).send(`An error ocurred in <%= pascalCase %>Controller.delete<%= pascalCase %>: ${error}`);
		}
	};
}

<% } else { %>

const _<%= camelCase %>Service = require('./<%= lowerCase %>.service');

const <%= pascalCase %>Controller = {};

<%= pascalCase %>Controller.get<%= pascalCase %> = async (req, res) => {
	try {
		const <%= camelCase %> = await _<%= camelCase %>Service.find(req.query);
		return res.json(<%= camelCase %>);
	} catch (error) {
		console.error(`An error ocurred in <%= pascalCase %>Controller.get<%= pascalCase %>: ${error}`);
		return res.status(500).send(`An error ocurred in <%= pascalCase %>Controller.get<%= pascalCase %>: ${error}`);
	}
};

<%= pascalCase %>Controller.save<%= pascalCase %> = async (req, res) => {
	try {
		const saved = await _<%= camelCase %>Service.save(req.body);
		return res.send(saved);
	} catch (error) {
		console.error(`An error ocurred in <%= pascalCase %>Controller.save<%= pascalCase %>: ${error}`);
		return res.status(500).send(`An error ocurred in <%= pascalCase %>Controller.save<%= pascalCase %>: ${error}`);
	}
};

<%= pascalCase %>Controller.update<%= pascalCase %> = async (req, res) => {
	const { id } = req.params;

	try {
		const updated = await _<%= camelCase %>Service.update(parseInt(id), req.body);
		return res.send(updated);
	} catch (error) {
		console.error(`An error ocurred in <%= pascalCase %>Controller.update<%= pascalCase %>: ${error}`);
		return res.status(500).send(`An error ocurred in <%= pascalCase %>Controller.update<%= pascalCase %>: ${error}`);
	}
};

<%= pascalCase %>Controller.delete<%= pascalCase %> = async (req, res) => {
	const { id } = req.params;

	try {
		const deleted = await _<%= camelCase %>Service.delete(parseInt(id));
		return res.send(deleted);
	} catch (error) {
		console.error(`An error ocurred in <%= pascalCase %>Controller.delete<%= pascalCase %>: ${error}`);
		return res.status(500).send(`An error ocurred in <%= pascalCase %>Controller.delete<%= pascalCase %>: ${error}`);
	}
};

module.exports = <%= pascalCase %>Controller;

<% } %>